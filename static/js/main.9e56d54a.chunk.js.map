{"version":3,"sources":["constants.js","helpers.js","components/Disk.js","components/GameOver.js","components/Controller.js","components/Initializer.js","App.js","serviceWorker.js","index.js"],"names":["constants","getRandInt","max","Math","floor","random","get1ToN","n","result","i","push","getLast","array","length","getUpToSecondLast","slice","getMeasurements","size","BASE_WIDTH","BASE_HEIGHT","multiplier","ceil","Disk","props","active","xy","move","color","divWidth","width","height","useSpring","x","y","setPosition","useState","zIndex","setZIndex","myRef","React","useRef","bind","useGesture","onDrag","event","cancel","preventDefault","onDragEnd","moveTo","domTarget","eventOptions","passive","useEffect","div","ref","style","position","borderRadius","background","cursor","display","justifyContent","alignSelf","DISK_COLORS","GAME_OVER_MSGS","numColors","numGameOverMsgs","GameOver","from","opacity","fontSize","gameOverMsg","to","next","a","Controller","state","gameOver","col1","numDisks","reverse","col2","col3","isGameOver","getIsActive","getPosition","window","innerWidth","diskWidth","includes","getY","col","innerHeight","colNum","fromCol","toCol","newFromCol","newToCol","newCol1","newCol2","newCol3","setState","this","restart","top","left","right","Button","onClick","map","key","Component","maxNumDisks","Initializer","error","handleSubmit","data","FormData","target","parseInt","get","setNumDisks","marginTop","onSubmit","noValidate","autoComplete","TextField","name","label","helperText","autoFocus","DIV_COLORS","App","initializing","userSelect","textAlign","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9e56d54a.chunk.js","sourcesContent":["export const constants = {\r\n  BASE_WIDTH: 60,\r\n  BASE_HEIGHT: 20,\r\n  DIV_COLORS: [\r\n    \"rgb(215, 169, 227, 0.4)\",\r\n    \"rgb(139, 190, 232, 0.4)\",\r\n    \"rgb(168, 213, 186, 0.4)\"\r\n  ],\r\n  DISK_COLORS: [\r\n    // 12 colors, referenced from\r\n    // https://venngage.com/blog/how-to-pick-colors/\r\n    \"#fef200\",\r\n    \"#9bca3b\",\r\n    \"#27b252\",\r\n    \"#0db0a1\",\r\n    \"#3654a7\",\r\n    \"#493a98\",\r\n    \"#92278f\",\r\n    \"#92296d\",\r\n    \"#ed1923\",\r\n    \"#ef4224\",\r\n    \"#f36522\",\r\n    \"#f89f1a\"\r\n  ],\r\n  GAME_OVER_MSGS: [\r\n    // World's top 20 languages, referenced from\r\n    // https://www.mentalfloss.com/article/67766/worlds-top-20-languages-and-words-english-has-borrowed-them\r\n    \"游戏结束!\", // Chinese\r\n    \"¡Juego terminado!\", // Spanish\r\n    \"Game over!\",\r\n    \"खेल खत्म!\", // Hindi\r\n    \"انتهت اللعبة!\", // Arabic\r\n    \"Fim de jogo!\", // Portuguese\r\n    \"খেলা শেষ!\", // Bangla\r\n    \"Игра закончена!\", // Russian\r\n    \"ゲームオーバー！\", // Japanese\r\n    \"ਖੇਲ ਖਤਮ!\", // Punjabi\r\n    \"Game liwat!\", // Javanese\r\n    \"Spiel ist aus!\", // German\r\n    \"게임 끝!\", // Korean\r\n    \"Jeu terminé!\", // French\r\n    \"ఆట సమాప్తం!\", // Telugu\r\n    \"खेळ संपला!\", // Marathi\r\n    \"Oyun bitti!\", // Turkish\r\n    \"விளையாட்டு முடிவு அடைந்தது!\", // Tamil\r\n    \"Trò chơi kết thúc!\", // Vietnamese\r\n    \"کھیل ختم!\" // Urdu\r\n  ]\r\n};\r\n","import { constants } from \"./constants\";\r\n\r\nexport const getRandInt = max => Math.floor(Math.random() * max);\r\n\r\nexport const get1ToN = n => {\r\n  const result = [];\r\n  for (let i = 1; i <= n; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const getLast = array => array[array.length - 1];\r\n\r\nexport const getUpToSecondLast = array => array.slice(0, array.length - 1);\r\n\r\nexport const getMeasurements = size => {\r\n  const { BASE_WIDTH, BASE_HEIGHT } = constants;\r\n  const multiplier = size * 0.4 + 0.6;\r\n  return [Math.ceil(BASE_WIDTH * multiplier), BASE_HEIGHT];\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport { useGesture } from \"react-use-gesture\";\r\n\r\nimport { getMeasurements } from \"../helpers\";\r\n\r\nfunction Disk(props) {\r\n  const { active, xy, move, size, color, divWidth } = props;\r\n  const [width, height] = getMeasurements(size);\r\n\r\n  // spring to smoothen drag\r\n  const [{ x, y }, setPosition] = useSpring(() => ({ x: xy[0], y: xy[1] }));\r\n\r\n  // z-index to put moving disk in front\r\n  const [zIndex, setZIndex] = useState(1);\r\n\r\n  const myRef = React.useRef(null);\r\n\r\n  const bind = useGesture(\r\n    {\r\n      onDrag: ({ event, xy: [x, y], cancel }) => {\r\n        event.preventDefault();\r\n        if (active) {\r\n          setPosition({ x: x - width / 2, y: y - height / 2 });\r\n          setZIndex(99);\r\n        }\r\n      },\r\n      onDragEnd: ({ event, xy: [x, y] }) => {\r\n        event.preventDefault();\r\n        if (active) {\r\n          const colNum = x <= divWidth ? 1 : x <= 2 * divWidth ? 2 : 3;\r\n          const moveTo = move(colNum, size);\r\n          setPosition({ x: moveTo[0], y: moveTo[1] });\r\n          setZIndex(1);\r\n        }\r\n      }\r\n    },\r\n    {\r\n      domTarget: myRef,\r\n      eventOptions: { passive: false }\r\n    }\r\n  );\r\n\r\n  React.useEffect(bind, [bind]);\r\n\r\n  return (\r\n    <animated.div\r\n      ref={myRef}\r\n      {...bind()}\r\n      style={{\r\n        position: \"absolute\",\r\n        x,\r\n        y,\r\n        zIndex,\r\n        width,\r\n        height,\r\n        borderRadius: \"20px\",\r\n        background: color,\r\n        cursor: active ? \"grab\" : \"default\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n      }}\r\n    >\r\n      <span style={{ alignSelf: \"center\" }}>{size}</span>\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nexport default Disk;\r\n","import React from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\n\r\nimport { getRandInt } from \"../helpers\";\r\nimport { constants } from \"../constants\";\r\n\r\nconst { DISK_COLORS, GAME_OVER_MSGS } = constants;\r\nconst numColors = DISK_COLORS.length;\r\nconst numGameOverMsgs = GAME_OVER_MSGS.length;\r\n\r\nfunction GameOver() {\r\n  // spring to create animation\r\n  const props = useSpring({\r\n    from: { opacity: 0, fontSize: \"1rem\", color: \"white\", gameOverMsg: \"\" },\r\n    to: async next => {\r\n      while (true) {\r\n        const gameOverMsg = GAME_OVER_MSGS[getRandInt(numGameOverMsgs)];\r\n        await next({\r\n          opacity: 1,\r\n          fontSize: \"2rem\",\r\n          color: DISK_COLORS[getRandInt(numColors)],\r\n          gameOverMsg\r\n        });\r\n        await next({\r\n          opacity: 0,\r\n          fontSize: \"1rem\",\r\n          color: \"white\",\r\n          gameOverMsg\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  return <animated.div style={props}>{props.gameOverMsg}</animated.div>;\r\n}\r\n\r\nexport default GameOver;\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Disk from \"./Disk\";\r\nimport GameOver from \"./GameOver\";\r\nimport {\r\n  get1ToN,\r\n  getLast,\r\n  getUpToSecondLast,\r\n  getMeasurements\r\n} from \"../helpers\";\r\nimport { constants } from \"../constants\";\r\n\r\nconst { DISK_COLORS } = constants;\r\n\r\nclass Controller extends React.Component {\r\n  state = {\r\n    gameOver: false,\r\n    col1: get1ToN(this.props.numDisks).reverse(),\r\n    col2: [],\r\n    col3: []\r\n  };\r\n\r\n  isGameOver = (col2, col3) => {\r\n    const { numDisks } = this.props;\r\n    return col2.length === numDisks || col3.length === numDisks;\r\n  };\r\n\r\n  getIsActive = size => {\r\n    const { gameOver, col1, col2, col3 } = this.state;\r\n    return (\r\n      !gameOver &&\r\n      (getLast(col1) === size ||\r\n        getLast(col2) === size ||\r\n        getLast(col3) === size)\r\n    );\r\n  };\r\n\r\n  getPosition = (col1, col2, col3, size) => {\r\n    const width = window.innerWidth / 6;\r\n    const diskWidth = getMeasurements(size)[0];\r\n    if (col1.includes(size)) {\r\n      const x = width - diskWidth / 2;\r\n      const y = this.getY(col1, size);\r\n      return [x, y];\r\n    }\r\n\r\n    if (col2.includes(size)) {\r\n      const x = width * 3 - diskWidth / 2;\r\n      const y = this.getY(col2, size);\r\n      return [x, y];\r\n    }\r\n\r\n    const x = width * 5 - diskWidth / 2;\r\n    const y = this.getY(col3, size);\r\n    return [x, y];\r\n  };\r\n\r\n  getY = (col, size) => {\r\n    const height = window.innerHeight - 150;\r\n    const diskHeight = getMeasurements(size)[1];\r\n    let y = height - diskHeight;\r\n    let i = 0;\r\n    while (col[i] !== size) {\r\n      y -= getMeasurements(col[i])[1];\r\n      i++;\r\n    }\r\n    return y;\r\n  };\r\n\r\n  move = (colNum, size) => {\r\n    const { col1, col2, col3 } = this.state;\r\n    // prettier-ignore\r\n    const fromCol = col1.includes(size) ? col1 : col2.includes(size) ? col2 : col3;\r\n    const toCol = colNum === 1 ? col1 : colNum === 2 ? col2 : col3;\r\n\r\n    if (fromCol === toCol || size > getLast(toCol)) {\r\n      return this.getPosition(col1, col2, col3, size);\r\n    }\r\n\r\n    const newFromCol = getUpToSecondLast(fromCol);\r\n    const newToCol = [...toCol, size];\r\n\r\n    // prettier-ignore\r\n    const newCol1 = col1 === fromCol ? newFromCol : col1 === toCol ? newToCol : col1\r\n    // prettier-ignore\r\n    const newCol2 = col2 === fromCol ? newFromCol : col2 === toCol ? newToCol : col2\r\n    // prettier-ignore\r\n    const newCol3 = col3 === fromCol ? newFromCol : col3 === toCol ? newToCol : col3\r\n\r\n    this.setState({\r\n      gameOver: this.isGameOver(newCol2, newCol3),\r\n      col1: newCol1,\r\n      col2: newCol2,\r\n      col3: newCol3\r\n    });\r\n    return this.getPosition(newCol1, newCol2, newCol3, size);\r\n  };\r\n\r\n  render() {\r\n    const { numDisks, divWidth, restart } = this.props;\r\n    const { gameOver, col1, col2, col3 } = this.state;\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 30,\r\n            left: 0,\r\n            right: 0\r\n          }}\r\n        >\r\n          <Button color='secondary' onClick={restart}>\r\n            Restart\r\n          </Button>\r\n        </div>\r\n\r\n        {gameOver && (\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              top: 80,\r\n              left: 0,\r\n              right: 0\r\n            }}\r\n          >\r\n            <GameOver />\r\n          </div>\r\n        )}\r\n\r\n        {get1ToN(numDisks).map(size => (\r\n          <Disk\r\n            key={size}\r\n            active={this.getIsActive(size)}\r\n            xy={this.getPosition(col1, col2, col3, size)}\r\n            move={this.move}\r\n            size={size}\r\n            color={DISK_COLORS[size - 1]}\r\n            divWidth={divWidth}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Controller;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport { get1ToN } from \"../helpers\";\r\nimport { constants } from \"../constants\";\r\n\r\nconst { DISK_COLORS } = constants;\r\nconst maxNumDisks = DISK_COLORS.length;\r\n\r\nclass Initializer extends React.Component {\r\n  state = { error: false };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.target);\r\n    const numDisks = parseInt(data.get(\"numDisks\"));\r\n    if (get1ToN(maxNumDisks).includes(numDisks)) {\r\n      this.props.setNumDisks(numDisks);\r\n    } else {\r\n      this.setState({ error: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { error } = this.state;\r\n    return (\r\n      <div style={{ marginTop: 30 }}>\r\n        <form onSubmit={this.handleSubmit} noValidate autoComplete='off'>\r\n          <TextField\r\n            name='numDisks'\r\n            label='Number of Disks'\r\n            helperText={`Enter a number up to ${maxNumDisks}`}\r\n            autoFocus={true}\r\n            error={error}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Initializer;\r\n","import React from \"react\";\r\n\r\nimport Controller from \"./components/Controller\";\r\nimport Initializer from \"./components/Initializer\";\r\nimport { constants } from \"./constants\";\r\n\r\nconst { DIV_COLORS } = constants;\r\n\r\nclass App extends React.Component {\r\n  state = { initializing: true, numDisks: null };\r\n\r\n  render() {\r\n    const { initializing, numDisks } = this.state;\r\n    const width = window.innerWidth / 3;\r\n    const height = window.innerHeight - 150;\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{ position: \"relative\", display: \"flex\", userSelect: \"none\" }}\r\n        >\r\n          <div style={{ width, height, background: DIV_COLORS[0] }} />\r\n          <div style={{ width, height, background: DIV_COLORS[1] }} />\r\n          <div style={{ width, height, background: DIV_COLORS[2] }} />\r\n\r\n          <div\r\n            style={{\r\n              position: \"absolute\",\r\n              left: 0,\r\n              right: 0,\r\n              textAlign: \"center\"\r\n            }}\r\n          >\r\n            {initializing ? (\r\n              <Initializer\r\n                setNumDisks={numDisks =>\r\n                  this.setState({ initializing: false, numDisks })\r\n                }\r\n              />\r\n            ) : (\r\n              <Controller\r\n                numDisks={numDisks}\r\n                divWidth={width}\r\n                restart={() => this.setState({ initializing: true })}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            width: window.innerWidth,\r\n            height: 150,\r\n            background: \"gainsboro\"\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}